<comment>

problem = Simple 2d test problem for debugging purposes
author  = 
journal =
config  = --with-problem=rad2d --enable-mpi --with-radiation_transfer=jacobi

<job>

problem_id      = Beam2D  # problem ID: basename of output filenames
maxout          = 4   # Output blocks number from 1 -> maxout
num_domains     = 1          # number of Domains in Mesh

<output1>
out_fmt = rst                # Restart dump
dt      = 1.                 # time increment between outputs

<output2>
out_fmt = hst                # History data dump
dt      = 1.                 # time increment between outputs

<output3>
out_fmt = vtk                # VTK data dump
dt      = 1.                 # time increment between outputs

<output4>
out_fmt = tab                # Tabular dump
dt      = 1.                 # time increment between outputs

<time>

cour_no         = 0.4       # The Courant, Friedrichs, & Lewy (CFL) Number
nlim            = 1    # cycle limit
tlim            = 1e5  # time limit

<domain1>
level           = 0         # refinement level this Domain (root=0)
Nx1             = 256       # Number of zones in X-direction
x1min           = 0.0       # minimum value of X
x1max           = 1.0       # maximum value of X
bc_ix1          = 4         # boundary condition flag for inner-I (X1)
bc_ox1          = 4         # boundary condition flag for outer-I (X1)
rbc_ix1         = 4         # rad boundary condition flag for inner-I (X1)
rbc_ox1         = 4         # rad boundary condition flag for outer-I (X1)
NGrid_x1        = 2         # with MPI, number of Grids in X1 coordinate

Nx2             = 256         # Number of zones in Y-direction
x2min           = 0.0       # minimum value of Y
x2max           = 1.0       # maximum value of Y
bc_ix2          = 4         # boundary condition flag for inner-J (X2)
bc_ox2          = 4         # boundary condition flag for outer-J (X2)
rbc_ix2         = 2         # rad boundary condition flag for inner-J (X2)
rbc_ox2         = 2         # rad boundary condition flag for outer-J (X2)
NGrid_x2        = 2         # with MPI, number of Grids in X2 coordinate


Nx3             = 1         # Number of zones in X3-direction
x3min           = 0.0       # minimum value of X3
x3max           = 0.0       # maximum value of X3
bc_ix3          = 4         # boundary condition flag for inner-K (X3)
bc_ox3          = 4         # boundary condition flag for outer-K (X3)
rbc_ix3         = 4         # rad boundary condition flag for inner-K (X3)
rbc_ox3         = 4         # rad boundary condition flag for outer-K (X3)
NGrid_x3        = 1         # with MPI, number of Grids in X3 coordinate

<radiation>
lte             = 1	     # lte = 0 -- iterate S; 1 -- iterate J
niter		= 40	     # maximum number of rad trans iterations
dScnv		= 1.0e-8     # relative change in S (or J) required for conv.
nf		= 1	     # number of frequencies
nmu		= 6	     # number of polar angles 
isor            = 0          # 0 no SOR, 1 SOR for gauss-seidel (SOR with 1D only!) 
svwght          = 0          # 0 save integration weight; 1 compute each iter

<problem>
iso_csound      = 0.00408    # Isothermal sound speed squared
gamma           = 1.6666666666666667    # gamma = C_p/C_v
iang		= 2          # beam angle (2,11)
ihor1		= 96	     # horizontal position of r beam source
ihor2		= -80	     # horizontal position of l beam source
ivert1		= -96	     # vertical position of r beam source
ivert2		= -80	     # vertical position of l beam source
tau0		= 1.0E-8     # optical depth accross gridzone     
t0		= 0.3        # time used for shearing test                  
<log>
child_out_level=-1
