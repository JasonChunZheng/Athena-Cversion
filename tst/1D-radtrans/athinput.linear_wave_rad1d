<comment>
problem = linear wave convergence
author  =
journal =
config  = --with-problem=linear_wave_rad1d --with-gas=hydro --enable-radiation-transfer

<job>
problem_id      = LinWave    # problem ID: basename of output filenames
maxout          = 2          # Output blocks number from 1 -> maxout
num_domains     = 1          # number of Domains in Mesh
 
<output1>
out_fmt = tab               # Tabular data dump
out     = prim              # variables to be output
dat_fmt = %12.5e            # Optional data format string
dt      = 1000.               # time increment between outputs
 
<output2>
out_fmt = hst               # History data dump
dt      = 0.01              # time increment between outputs

<output3>
out_fmt = rst                # restart dump
dt      = 0.5                # time increment between outputs

<output4>
out_fmt = vtk                # VTK data dump
dt      = 1.0                 # time increment between outputs
 
<time>
cour_no         = 0.4       # The Courant, Friedrichs, & Lewy (CFL) Number
nlim            = 10000000    # cycle limit
tlim            =       1.00000  # time limit
 
<domain1>
level           = 0         # refinement level this Domain (root=0)
Nx1             =  16 # Number of zones in X1-direction
x1min           = 0.0       # minimum value of X1
x1max           = 1.0       # maximum value of X1
bc_ix1          = 4         # boundary condition flag for inner-I (X1)
bc_ox1          = 4         # boundary condition flag for outer-I (X1)
rbc_ix1         = 4         # rad boundary condition flag for inner-I (X1)
rbc_ox1         = 4         # rad boundary condition flag for outer-I (X1)
NGrid_x1        = 1         # with MPI, number of Grids in X1 coordinate
 
Nx2             = 16 # Number of zones in X2-direction
x2min           = 0.0       # minimum value of X2
x2max           = 1.0       # maximum value of X2
bc_ix2          = 4         # boundary condition flag for inner-J (X2)
bc_ox2          = 4         # boundary condition flag for outer-J (X2)
rbc_ix2         = 4         # rad boundary condition flag for inner-J (X2)
rbc_ox2         = 4         # rad boundary condition flag for outer-J (X2)
NGrid_x2        = 1         # with MPI, number of Grids in X1 coordinate
 
Nx3             = 16 # Number of zones in X3-direction
x3min           = 0.0       # minimum value of X3
x3max           = 1.0       # maximum value of X3
bc_ix3          = 4         # boundary condition flag for inner-K (X3)
bc_ox3          = 4         # boundary condition flag for outer-K (X3)
rbc_ix3         = 4         # rad boundary condition flag for inner-K (X3)
rbc_ox3         = 4         # rad boundary condition flag for outer-K (X3)
NGrid_x3        = 1         # with MPI, number of Grids in X1 coordinate
 
<radiation>
lte             = 1	     # lte = 0 -- iterate S; 1 -- iterate J
niter		= 5	     # maximum number of rad trans iterations
dScnv		= 1.0e-16     # relative change in S (or J) required for conv.
nf		= 1	     # number of frequencies
nmu		=        2 # number of polar angles/quadrant (1 <= nmu <= 6)
isor            = 0          # 0 no SOR, 1 SOR for gauss-seidel (SOR with 1D only!) 
svwght          = 0          # 0 save integration weight; 1 compute each iter
 
<problem>
gamma		= 1.6666666666666667  # gamma = C_p/C_v
amp             = 1.0e-6    # Wave Amplitude
vflow           = 0.        # Average x1 velocity
Bo              =        1.0 # Boltman number
tau             =        1.0 # optical depth per wavelength
wave_dir        =        1 # Wave direction (1 - 3)
